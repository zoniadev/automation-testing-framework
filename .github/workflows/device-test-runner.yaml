name: Device Test Runner

on:
  workflow_call:
    inputs:
      device:
        required: true
        type: string
      tags:
        required: false
        type: string
        default: ''
      environment:
        required: false
        type: string
        default: 'staging'
      report_scope:
        required: false
        type: string
        default: ''
      report_name:
        required: false
        type: string
        default: ''
    secrets:
      SMTP_USER_NASKO:
        required: true
      SMTP_PASS_NASKO:
        required: true
      SMTP_HOST_NASKO:
        required: true
      SMTP_PORT_NASKO:
        required: true

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      DEVICE: ${{ inputs.device }}
      REPORT_SCOPE: ${{ inputs.report_scope != '' && inputs.report_scope || inputs.device }}
      REPORT_NAME: ${{ inputs.report_name != '' && inputs.report_name || (inputs.report_scope != '' && inputs.report_scope || inputs.device) }}
      REPORT_BASE_URL: https://zoniadev.github.io/automation-testing-framework
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          npm install -g allure-commandline --save-dev
          npm install nodemailer --save-dev

      - name: Install missing libraries
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwoff1 \
            libevent-2.1-7 \
            libopus0 \
            libgstreamer-plugins-base1.0-0 \
            libgstreamer1.0-0 \
            libharfbuzz-icu0 \
            libhyphen0 \
            libmanette-0.2-0 \
            libflite1 \
            libgles2

      - name: Install Chromium browser for Playwright
        run: |
          playwright install chromium

      - name: Run tests
        run: |
          set -euo pipefail
          DEVICE="${{ inputs.device }}"
          TAGS_INPUT="${{ inputs.tags }}"
          ENVIRONMENT="${{ inputs.environment }}"
          mkdir -p "allure-results/$REPORT_SCOPE"
          if [ -n "$TAGS_INPUT" ]; then
            TAGS_INPUT=$(echo "$TAGS_INPUT" | tr ' ' ',' | sed 's/,\{2,\}/,/g' | sed 's/^,//;s/,$//')
            TAGS="--tags $TAGS_INPUT"
          else
            TAGS=""
          fi
          echo "Running tests with tags: ${TAGS:-<none>}, device: $DEVICE on env: $ENVIRONMENT"
          behave $TAGS -D headless=True -D device=$DEVICE -D env=$ENVIRONMENT -f allure_behave.formatter:AllureFormatter -o "allure-results/$REPORT_SCOPE" | tee test-summary.txt
        shell: bash

      - name: Copy environment properties
        if: always()
        run: |
          set -euo pipefail
          RESULTS_DIR="allure-results/$REPORT_SCOPE"
          if [ -f "allure-results/environment.properties" ]; then
            cp "allure-results/environment.properties" "$RESULTS_DIR/environment.properties"
          fi
        shell: bash

      - name: Load test report history
        uses: actions/checkout@v3
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Prepare Allure workspace
        if: always()
        run: |
          set -euo pipefail
          DEVICE="${{ inputs.device }}"
          mkdir -p allure-history
          if [ -d gh-pages ]; then
            rsync -a --exclude '.git' gh-pages/ allure-history/
          fi
            mkdir -p "allure-history/$REPORT_SCOPE/$REPORT_NAME"
        shell: bash

      - name: Determine report sequence
        if: always()
        run: |
          set -euo pipefail
            REPORT_SCOPE="${REPORT_SCOPE}"
            REPORT_NAME="${REPORT_NAME}"
            HISTORY_ROOT="allure-history/$REPORT_SCOPE/$REPORT_NAME"
            SEQUENCE_FILE="$HISTORY_ROOT/.sequence"

            mkdir -p "$HISTORY_ROOT"

            LAST_SEQUENCE=0
            if [ -f "$SEQUENCE_FILE" ]; then
              VALUE=$(head -n 1 "$SEQUENCE_FILE" | tr -dc '0-9')
              if [ -n "$VALUE" ]; then
                LAST_SEQUENCE="$VALUE"
              fi
            fi

            NEXT_SEQUENCE=$((LAST_SEQUENCE + 1))
            while [ -d "$HISTORY_ROOT/$NEXT_SEQUENCE" ]; do
              NEXT_SEQUENCE=$((NEXT_SEQUENCE + 1))
            done

            printf "%s\n" "$NEXT_SEQUENCE" > "$SEQUENCE_FILE"
            echo "REPORT_SEQUENCE=$NEXT_SEQUENCE" >> "$GITHUB_ENV"
            echo "Using report sequence $NEXT_SEQUENCE for scope $REPORT_SCOPE and name $REPORT_NAME."
        shell: bash

      - name: Send failure email
        if: always()
        run: |
          echo "Starting email script..."
          node .github/scripts/send-email.js
        env:
          SMTP_USER: ${{ secrets.SMTP_USER_NASKO }}
          SMTP_PASS: ${{ secrets.SMTP_PASS_NASKO }}
          SMTP_HOST: ${{ secrets.SMTP_HOST_NASKO }}
          SMTP_PORT: ${{ secrets.SMTP_PORT_NASKO }}
          TARGET_URL: ${{ env.REPORT_BASE_URL }}/${{ env.REPORT_SCOPE }}/${{ env.REPORT_NAME }}/${{ env.REPORT_SEQUENCE }}

      - name: Generate Allure report
        if: always()
        run: |
          set -euo pipefail
          DEVICE="${{ inputs.device }}"
            REPORT_SEQUENCE="${{ env.REPORT_SEQUENCE:?REPORT_SEQUENCE not set}}"
            REPORT_NAME="${{ env.REPORT_NAME }}"
            RESULTS_DIR="allure-results/$REPORT_SCOPE"
            HISTORY_SNAPSHOT="allure-history/$REPORT_SCOPE/$REPORT_NAME/latest/history"

            if [ ! -d "$RESULTS_DIR" ] || [ -z "$(ls -A "$RESULTS_DIR" 2>/dev/null)" ]; then
              echo "No allure results found for $DEVICE. Skipping report generation."
              exit 0
            fi

            if [ -d "$HISTORY_SNAPSHOT" ]; then
              mkdir -p "$RESULTS_DIR/history"
              rsync -a --delete "$HISTORY_SNAPSHOT/" "$RESULTS_DIR/history/"
            fi

            OUTPUT_DIR="allure-history/$REPORT_SCOPE/$REPORT_NAME/$REPORT_SEQUENCE"
            allure generate "$RESULTS_DIR" --clean -o "$OUTPUT_DIR"
            rm -rf "allure-history/$REPORT_SCOPE/$REPORT_NAME/latest"
            cp -R "$OUTPUT_DIR" "allure-history/$REPORT_SCOPE/$REPORT_NAME/latest"
        shell: bash

      - name: Create redirect files
        if: always()
        run: |
          set -euo pipefail
          REPORT_SCOPE="${{ env.REPORT_SCOPE }}"
          REPORT_NAME="${{ env.REPORT_NAME }}"
          REPORT_SEQUENCE="${{ env.REPORT_SEQUENCE }}"
          REPORT_NAME_REDIRECT_FILE="allure-history/$REPORT_SCOPE/$REPORT_NAME/index.html"
          echo "<!DOCTYPE html><html><head><meta http-equiv=\"refresh\" content=\"0; url=./$REPORT_SEQUENCE/\"></head><body><p>Redirecting to the <a href=\"./$REPORT_SEQUENCE/\">latest report for $REPORT_NAME</a>.</p></body></html>" > "$REPORT_NAME_REDIRECT_FILE"
          REPORT_SCOPE_REDIRECT_FILE="allure-history/$REPORT_SCOPE/index.html"
          echo "<!DOCTYPE html><html><head><meta http-equiv=\"refresh\" content=\"0; url=./$REPORT_NAME/$REPORT_SEQUENCE/\"></head><body><p>Redirecting to the <a href=\"./$REPORT_NAME/$REPORT_SEQUENCE/\">latest report for the $REPORT_SCOPE scope</a>.</p></body></html>" > "$REPORT_SCOPE_REDIRECT_FILE"
        shell: bash

      - name: Generate portal page
        if: always()
        run: |
          node .github/scripts/generate-portal.js
        shell: bash

      - name: Ensure Jekyll is disabled
        if: always()
        run: |
          touch allure-history/.nojekyll
        shell: bash

      - name: Publish test report
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history

      - name: Post the link to the report
        if: always()
        uses: Sibz/github-status-action@v1
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}
          context: 'Test report'
          state: 'success'
          sha: ${{ github.sha }}
          target_url: ${{ env.REPORT_BASE_URL }}/${{ env.REPORT_SCOPE }}/${{ env.REPORT_NAME }}/${{ env.REPORT_SEQUENCE }}
